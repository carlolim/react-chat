{"version":3,"sources":["firebase.js","store.js","register.js","App.js","registerServiceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","addMessageToFirebase","message","ref","push","GET_MESSAGES","ADD_MESSAGE","ADD_USER","GET_USERS","addMessage","type","payload","addUser","user","initialState","users","messages","createStore","state","arguments","length","undefined","action","Object","objectSpread","toConsumableArray","concat","name","applyMiddleware","thunkMiddleware","Register","react_default","a","createElement","style","maxWidth","margin","marginTop","className","htmlFor","onSubmit","e","preventDefault","id","uuid","error","console","log","localStorage","setItem","JSON","stringify","content","userId","window","location","reload","addUserToFirebase","target","value","autoComplete","Component","connect","dispatch","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setInterval","objDiv","document","getElementById","scrollTop","scrollHeight","setState","hasUser","parse","getItem","_this2","maxHeight","overflowY","map","item","index","isMe","key","handleAddMessage","onChange","handleMessageChange","bind","src_register","on","snap","val","watchMessageAddedEvent","watchUserAddedEvent","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","es","store","src_App_0","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a0b6dbf7.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nimport uuid from 'uuid/v4';\r\n\r\n// Initialize Firebase\r\nvar config = {\r\n  apiKey: \"AIzaSyAurCWIRGX8SCaNGIyfThNKkvr8FrJScn8\",\r\n  authDomain: \"react-firebase-e48ce.firebaseapp.com\",\r\n  databaseURL: \"https://react-firebase-e48ce.firebaseio.com\",\r\n  projectId: \"react-firebase-e48ce\",\r\n  storageBucket: \"\",\r\n  messagingSenderId: \"724913728461\"\r\n};\r\n\r\n\r\nfirebase.initializeApp(config);\r\nconst database = firebase.database()\r\n\r\n\r\nexport const addTaskToFirebase = (task) => {\r\n const id = uuid()\r\n database.ref(`/${id}`).set({\r\n \ttask, id\r\n });\r\n}\r\n\r\nexport const removeTaskFromFirebase = (id) => {\r\n\tdatabase.ref(`/${id}`).remove();\r\n}\r\n\r\nexport const register = (name) => {\r\n\tconst id = uuid()\r\n\tfirebase.auth().createUserWithEmailAndPassword(name, id).catch(function(error) {\r\n\t  console.log(error);\r\n\t});\r\n}\r\n\r\nexport const addMessageToFirebase = (message) => {\r\n\tdatabase.ref(`/messages`).push(message);\r\n}\r\n\r\nexport const addUserToFirebase = (name) => {\r\n\tif(name !== '' && name !== null && name !== undefined) {\r\n\t\tconst id = uuid()\r\n\t\tdatabase.ref(`/users`).push({ name, id }, function (error) {\r\n\t\t\tif (error) {\r\n\t\t\t\tconsole.log(\"Registration error: \", error);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet user = { id, name };\r\n\t\t\t\tlocalStorage.setItem('user', JSON.stringify(user));\r\n\t\t\t\taddMessageToFirebase({\r\n\t\t\t\t\tcontent: name + \" joined the chat.\",\r\n\t\t\t\t\tuserId: '1',\r\n\t\t\t\t\tuser: {\r\n\t\t\t\t\t\tid: '1', name : '[system]'\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\twindow.location.reload();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default database","import { createStore, applyMiddleware } from 'redux';\r\nimport database from './firebase';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\n/**\r\n * ACTION TYPES\r\n */\r\nconst GET_MESSAGES = \"get all messages append sa store\";\r\nconst ADD_MESSAGE = \"append new message from firebase to store\";\r\nconst ADD_USER = \"append new user to store\";\r\nconst GET_USERS = \"get all users\";\r\n//const ADD_TASK = 'add task'\r\n//const REMOVE_TASK = 'remove task'\r\n//const GET_TASKS = 'get tasks'\r\n//const UPDATE_TASKS = 'update tasks'\r\n\r\n/**\r\n * ACTION CREATORS\r\n */\r\nexport const getMessages = (messages) => ({ type: GET_MESSAGES, payload: messages });\r\nexport const addMessage = (message) => ({ type: ADD_MESSAGE, payload: message });\r\nexport const addUser = (user) => ({type: ADD_USER, payload: user });\r\nexport const getUsers = (users) => ({ type: GET_USERS, payload: users });\r\n//export const addTask = (task) => ({type: ADD_TASK, task});\r\n//export const removeTask = (task) => ({type: REMOVE_TASK, task});\r\n//export const getTasks = (tasks) => ({type: GET_TASKS, tasks});\r\n//export const updateTasks = (tasks) => ({type: UPDATE_TASKS, tasks});\r\n\r\n/**\r\n * THUNKS\r\n */\r\nexport function getMessagesThunk() {\r\n  return dispatch => {\r\n    const messages = [];\r\n    database.ref(`/messages`).once('value', snap => {\r\n      snap.forEach(data => {\r\n        messages.push(data.val());\r\n      });\r\n    });\r\n    dispatch(getMessages(messages));\r\n  }\r\n}\r\n\r\nexport function getUsersThunk() {\r\n  return dispatch => {\r\n    const users = [];\r\n    database.ref(`/users`).once('value', snap => {\r\n      snap.forEach(data => {\r\n        users.push(data.val().name);\r\n      });\r\n      dispatch(getUsers(users));\r\n    });\r\n  }\r\n}\r\n\r\nexport function watchMessageAddedEvent(dispatch) {\r\n  database.ref(`/messages`).on('child_added', snap => {\r\n    dispatch(addMessage(snap.val()));\r\n  });\r\n}\r\n\r\nexport function watchUserAddedEvent(dispatch) {\r\n  database.ref(`/users`).on('child_added', snap => {\r\n    dispatch(addUser(snap.val()));\r\n  });\r\n}\r\n\r\n//export function getTasksThunk() {\r\n//  return dispatch => {\r\n//    const tasks = [];\r\n//    database.ref(`/`).once('value', snap => {\r\n//          snap.forEach(data => {\r\n//            let task = data.val();\r\n//            tasks.push(task)\r\n//          })\r\n//      })\r\n//    .then(() => dispatch(getTasks(tasks)))\r\n//  }\r\n//}\r\n//\r\n//export function watchTaskAddedEvent(dispatch) {\r\n//  database.ref(`/`).on('child_added', (snap) => {\r\n//    dispatch(addTask(snap.val()));\r\n//  });\r\n//}\r\n//\r\n//export function watchTaskRemovedEvent(dispatch) {\r\n//  database.ref(`/`).on('child_removed', (snap) => {\r\n//    dispatch(removeTask(snap.val()));\r\n//  });\r\n//}\r\n//\r\n//export function watchTaskUpdateEvent(dispatch) {\r\n//  database.ref(`/`).on('value', (snap) => {\r\n//    let tasks = [];\r\n//    snap.forEach(data => {\r\n//      let task = data.val();\r\n//      tasks.push(task);\r\n//    });\r\n//    dispatch(getTasks(tasks))\r\n//  });\r\n//}\r\n/**\r\n * REDUCER\r\n */\r\n\r\nconst initialState = {\r\n  users: [],\r\n  messages: []\r\n}\r\nfunction Reducer (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_MESSAGES:\r\n      return { ...state, messages: action.payload };\r\n    case ADD_MESSAGE:\r\n      return { ...state, messages: [...state.messages, action.payload] };\r\n    case ADD_USER:\r\n      return { ...state, users: [...state.users, action.payload.name] };\r\n    case GET_USERS:\r\n      return { ...state, users: action.payload };\r\n    //case GET_TASKS:\r\n    //  return action.tasks\r\n    //case ADD_TASK:\r\n    //  return [...state, action.task]\r\n    //case REMOVE_TASK:\r\n    //  return state.filter(task => task.id !== action.task.id)\r\n    //case UPDATE_TASKS:\r\n    //  return action.tasks;\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nexport default createStore(Reducer, applyMiddleware(thunkMiddleware))","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { addUserToFirebase }  from './firebase'\r\nimport { connect } from 'react-redux'\r\nimport { watchMessageAddedEvent } from './store'\r\n\r\n\r\nclass Register extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{maxWidth: '500px', margin: '0 auto', marginTop: '100px'}}>\r\n          <section className=\"form container with-title\">\r\n              <h2 className=\"title\">Register</h2>\r\n              <div className=\"field\">\r\n                  <label htmlFor=\"name_field\">Welcome adventurer! Please input your name.</label>\r\n\r\n                  <form \r\n                      onSubmit={(e) => {\r\n                          e.preventDefault();\r\n                          addUserToFirebase(e.target.name.value);\r\n                      }}>\r\n                      <input autoComplete=\"off\" id=\"name_field\" type=\"text\" name=\"name\" className=\"input input-fix\" />\r\n                      <br />\r\n                      <button className=\"btn\">Submit</button>\r\n                  </form>\r\n              </div>\r\n          </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapState = state => ({\r\n  state\r\n})\r\n\r\nconst mapDispatch = dispatch => {\r\n  return {\r\n  }\r\n}\r\nexport default connect(mapState, mapDispatch)(Register);","import React, { Component } from 'react';\nimport './nes.min.css';\nimport './index.css';\nimport { addTaskToFirebase, removeTaskFromFirebase, register, addMessageToFirebase }  from './firebase'\nimport { connect } from 'react-redux'\nimport { watchMessageAddedEvent, watchUserAddedEvent } from './store'\nimport Register from \"./register\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    }\n  }\n\n  componentDidMount() {\n    setInterval(function() {\n        var objDiv = document.getElementById(\"messages-window\");\n        if(objDiv)\n            objDiv.scrollTop = objDiv.scrollHeight;\n    }, 500);\n  }\n\n  handleMessageChange(e) {\n    this.setState({...this.state, message: e.target.value});\n  }\n\n  handleAddMessage() {\n    if(this.hasUser()) {\n        if(this.state.message !== '') {\n            let user = JSON.parse(localStorage.getItem('user'));\n            addMessageToFirebase({\n                userId: user.id,\n                content: this.state.message,\n                user: user\n            }); \n            this.setState({...this.state, message: ''});\n        }\n    }\n    else {\n        window.location.reload();\n    }\n  }\n\n  hasUser(){\n      return localStorage.getItem('user') !== null;\n  }\n\n  isMe(userId) {\n      let user = JSON.parse(localStorage.getItem('user'));\n      return user.id === userId;\n  }\n\n  render() {\n    return (\n      <div style={{maxWidth: '600px', margin: '0 auto', marginTop: '100px'}}>\n          {this.hasUser() ? \n\n              <div>\n                  <section id=\"messages-window\" className=\"balloon container with-title\" style={{ maxHeight: '600px', overflowY: 'scroll'}}>\n                    <div className=\"messages\">\n\n                      {this.props.state.messages.map((item, index) => \n                          <div className={`text-${ this.isMe(item.userId) ? 'right' : 'left' }`} key={index}>\n                            <div className={`balloon from-${ this.isMe(item.userId) ? 'right' : 'left' }`}>\n                              <p>{item.content}</p>\n                            </div>\n                            <i className={`message-sender text-${ this.isMe(item.userId) ? 'right' : 'left' }`}>{item.user.name}</i>\n                          </div>\n                      )}\n\n                    </div>\n                  </section>\n\n                  <br />\n\n                  <section className=\"form container with-title\">\n                      <h2 className=\"title\">Message</h2>\n                      <div className=\"field\">\n                          <form \n                              onSubmit={(e) => {\n                                  e.preventDefault();\n                                  this.handleAddMessage();\n                              }}>\n                              <input autoComplete=\"off\" value={this.state.message} onChange={this.handleMessageChange.bind(this)} id=\"name_field\" type=\"text\" name=\"name\" className=\"input input-fix\" />\n                              <button className=\"btn\">Send</button>\n                          </form>\n                      </div>\n                  </section>\n              </div>\n              :\n              <Register />\n          }\n      </div>\n    );\n  }\n}\n\nconst mapState = state => ({\n  state\n})\n\nconst mapDispatch = dispatch => {\n  //dispatch(getTasksThunk());\n  //watchTaskAddedEvent(dispatch);\n  //watchTaskRemovedEvent(dispatch);\n  //watchTaskUpdateEvent(dispatch);\n  watchMessageAddedEvent(dispatch);\n  watchUserAddedEvent(dispatch);\n  return {\n  }\n}\nexport default connect(mapState, mapDispatch)(App);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport database from './firebase'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}